<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.fullstack7.edusecond.edusecond.mapper.ChatMapper">
    
    <!-- 채팅방 목록 조회 -->
    <!-- <select id="selectChatRoomList" resultType="net.fullstack7.edusecond.edusecond.dto.message.ChatRoomDTO">
        SELECT 
            c.roomId, c.productId,
            p.productName,
            pi.imagePath as productImage,
            m.userName as otherUserName,
            lcm.message as lastMessage,
            lcm.regDate as lastMessageDate,
            (SELECT COUNT(*) 
             FROM tbl_chat_message 
             WHERE roomId = c.roomId 
             AND isRead = 'N' 
             AND senderId != #{userId}) as unreadCount
        FROM tbl_chatroom c
        JOIN tbl_product p ON c.productId = p.productId
        JOIN tbl_product_image pi ON p.productId = pi.productId AND pi.isMain = 'Y'
        JOIN tbl_member m ON 
            CASE 
                WHEN c.sellerId = #{userId} THEN m.userId = c.buyerId
                ELSE m.userId = c.sellerId
            END
        LEFT JOIN (
            SELECT roomId, message, regDate
            FROM tbl_chat_message
            WHERE (roomId, regDate) IN (
                SELECT roomId, MAX(regDate)
                FROM tbl_chat_message
                GROUP BY roomId
            )
        ) lcm ON c.roomId = lcm.roomId
        WHERE (c.sellerId = #{userId} AND c.sellerActive = 'Y') 
           OR (c.buyerId = #{userId} AND c.buyerActive = 'Y')
        ORDER BY 
            CASE 
                WHEN lcm.regDate IS NULL THEN 1 
                ELSE 0 
            END,
            lcm.regDate DESC
    </select> -->

    <select id="selectChatRoomList" resultType="net.fullstack7.edusecond.edusecond.dto.message.ChatRoomDTO">
        SELECT 
            c.roomId,
            c.productId,
            c.sellerId,
            c.buyerId,
            p.productName,
            pi.imagePath as productImage,
            m.userName as otherUserName,
            lcm.message as lastMessage,
            lcm.regDate as lastMessageDate,
            COALESCE((SELECT COUNT(*) 
             FROM tbl_chat_message 
             WHERE roomId = c.roomId 
             AND isRead = 'N' 
             AND senderId != #{userId}), 0) as unreadCount
        FROM tbl_chatroom c
        LEFT JOIN tbl_product p ON c.productId = p.productId
        LEFT JOIN tbl_product_image pi ON p.productId = pi.productId AND pi.isMain = 'Y'
        LEFT JOIN tbl_member m ON 
            CASE 
                WHEN c.sellerId = #{userId} THEN m.userId = c.buyerId
                ELSE m.userId = c.sellerId
            END
        LEFT JOIN (
            SELECT cm1.roomId, cm1.message, cm1.regDate
            FROM tbl_chat_message cm1
            WHERE cm1.messageId = (
                SELECT cm2.messageId
                FROM tbl_chat_message cm2
                WHERE cm1.roomId = cm2.roomId
                ORDER BY cm2.regDate DESC, cm2.messageId DESC
                LIMIT 1
            )
        ) lcm ON c.roomId = lcm.roomId
        WHERE (c.sellerId = #{userId} AND c.sellerActive = 'Y') 
           OR (c.buyerId = #{userId} AND c.buyerActive = 'Y')
        ORDER BY 
            CASE 
                WHEN lcm.regDate IS NULL THEN 1 
                ELSE 0 
            END,
            lcm.regDate DESC
    </select>

    <!-- 채팅방 단일 조회 -->
    <select id="selectChatRoom" resultType="net.fullstack7.edusecond.edusecond.dto.message.ChatRoomDTO">
        SELECT 
            cr.roomId, cr.productId, cr.sellerId, cr.buyerId,
            p.productName,
            pi.imagePath as productImage,
            m.userName as otherUserName
        FROM tbl_chatroom cr
        LEFT JOIN tbl_product p ON cr.productId = p.productId
        LEFT JOIN tbl_product_image pi ON p.productId = pi.productId AND pi.isMain = 'Y'
        LEFT JOIN tbl_member m ON 
            CASE 
                WHEN cr.sellerId = #{userId} THEN m.userId = cr.buyerId
                ELSE m.userId = cr.sellerId
            END
        WHERE cr.roomId = #{roomId}
        AND (
            (cr.sellerId = #{userId} AND cr.sellerActive = 'Y')
            OR 
            (cr.buyerId = #{userId} AND cr.buyerActive = 'Y')
        )
    </select>

    <!-- 채팅방 생성 -->
    <insert id="insertChatRoom" parameterType="net.fullstack7.edusecond.edusecond.dto.message.ChatRoomDTO" useGeneratedKeys="true" keyProperty="roomId">
        INSERT INTO tbl_chatroom (productId, sellerId, buyerId, sellerActive, buyerActive)
        VALUES (#{productId}, #{sellerId}, #{buyerId}, 'Y', 'Y')
    </insert>

    <!-- 채팅 메시지 목록 조회 -->
    <select id="selectChatMessages" resultType="net.fullstack7.edusecond.edusecond.dto.message.ChatMessageDTO">
        SELECT 
            m.*,
            mb.userName as senderName
        FROM tbl_chat_message m
        LEFT JOIN tbl_member mb ON m.senderId = mb.userId
        WHERE m.roomId = #{roomId}
        ORDER BY m.messageId ASC
    </select>

    <!-- 메시지 저장 -->
    <insert id="insertMessage" parameterType="net.fullstack7.edusecond.edusecond.dto.message.ChatMessageDTO">
        INSERT INTO tbl_chat_message (roomId, senderId, message, isRead)
        VALUES (#{roomId}, #{senderId}, #{message}, 'N')
    </insert>

    <!-- 메시지 읽음 처리 -->
    <update id="updateMessageRead">
        UPDATE tbl_chat_message
        SET isRead = 'Y'
        WHERE roomId = #{roomId}
        AND senderId != #{userId}
        AND isRead = 'N'
    </update>
    <!--채팅방 상태 업데이트(비활성화)-->
    <update id="updateChatRoomStatus">
        UPDATE tbl_chatroom
        SET isActive = 'N'
        WHERE roomId = #{roomId}
    </update>

    <!-- 채팅방 나가기 (사용자별) -->
    <update id="updateUserChatRoomStatus">
        UPDATE tbl_chatroom
        SET 
            <if test="userType == 'SELLER'">
                sellerActive = #{status}
            </if>
            <if test="userType == 'BUYER'">
                buyerActive = #{status}
            </if>
        WHERE roomId = #{roomId}
    </update>

    <!-- 채팅방 존재 여부 확인 -->
    <select id="findExistingChatRoom" resultType="net.fullstack7.edusecond.edusecond.dto.message.ChatRoomDTO">
        SELECT roomId, productId, sellerId, buyerId
        FROM tbl_chatroom
        WHERE productId = #{productId}
        AND sellerId = #{sellerId}
        AND buyerId = #{buyerId}
        AND sellerActive = 'Y'
        AND buyerActive = 'Y'
        LIMIT 1
    </select>

    <update id="updateChatRoomsByUserId">
        UPDATE tbl_chatroom
        SET sellerActive = CASE 
                WHEN sellerId = #{userId} THEN 'N'
                ELSE sellerActive
            END,
            buyerActive = CASE 
                WHEN buyerId = #{userId} THEN 'N'
                ELSE buyerActive
            END
        WHERE sellerId = #{userId} OR buyerId = #{userId}
    </update>
    <!-- 활성화된 채팅방 확인 -->
    <select id="isActiveRoom" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM tbl_chatroom
        WHERE roomId = #{roomId} 
        AND sellerActive = 'Y' 
        AND buyerActive = 'Y'
    </select>
</mapper>